### load libraries
library(Seurat)
library(ggplot2)
library(patchwork)
library(scales)
library(dplyr)
library(reshape2)

### read 10X data executed by 10X cellranger firstly 
data_dir <- "/project/ag-schmidt-ott/Shuang/2023_CRISPR_25TF_library_sc_screening/135gRNAs_screen_filtered_feature_bc_matrix"
list(data_dir)
data <- Read10X(data.dir = data_dir)
class(data)
dim(data$`CRISPR Guide Capture`)
dim(data$`Gene Expression`)

### generate seurat object with gene expression data 
seurat_object <- CreateSeuratObject(counts = data$`Gene Expression`)
dim(seurat_object)

### add CRISPR count data to the seurat object 
seurat_object[['crispr']] = CreateAssayObject(counts = data$`CRISPR Guide Capture`)

#add metadata from csv 
crispr_data <- read.csv("/project/2023_CRISPR_25TF_library_sc_screening/135gRNAs_Protospacer Per Tag.csv")
head(crispr_data)

### add meta data to the seurat object 
crispr_data$sgRNA -> seurat_object[["sgRNA"]]
crispr_data$gene -> seurat_object[["gene"]]
crispr_data$NT -> seurat_object[["NT"]]
crispr_data$crispr -> seurat_object[["Crispr"]]
head(seurat_object@meta.data)

### data processing and quality checking
seurat_object[["percent.mt"]] <- PercentageFeatureSet(seurat_object, pattern = "^mt-")
VlnPlot(seurat_object, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)

### count gRNAs targeted cell numbers 
sg_count <- plyr::count(crispr_data, "sgRNA")
class(sg_count)
glimpse(crispr_data)
sgRNA_count <- sg_count %>%
  mutate(gene = sub("\\..*","",sgRNA)) %>%
  group_by(gene) %>%
  summarise(total_freq = sum(freq))
print(sgRNA_count)

#Normalization expression
DefaultAssay(seurat_object)
?NormalizeData
seurat_object <- NormalizeData(seurat_object, normalization.method = "LogNormalize")
plot1 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(seurat_object, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2

seurat_object <- FindVariableFeatures(seurat_object, selection.method = "vst")
all.genes <- rownames(seurat_object)
seurat_object<- ScaleData(seurat_object)
seurat_object <- RunPCA(seurat_object, features = VariableFeatures(object = seurat_object))

print(seurat_object[["pca"]], dims = 1:5, nfeatures = 5)
DimPlot(seurat_object, reduction = "pca")
ElbowPlot(seurat_object)

seurat_object <- FindNeighbors(seurat_object, dims = 1:20)
?FindClusters
seurat_object <- FindClusters(seurat_object, resolution = 0.5)
head(Idents(seurat_object), 5)

seurat_object <- RunUMAP(seurat_object, dims = 1:20)
DimPlot(seurat_object, reduction = "umap", group.by = "Crispr")
seurat_object <- RunTSNE(seurat_object)
DimPlot(seurat_object, reduction = "tsne", group.by = "sgRNA")

#exclude multi-protospacer cells and no-protospacer cells
dim(seurat_object)
sub_cluster <- subset(seurat_object, subset = Crispr %in% c("NT", "Perturbed"))
dim(sub_cluster)


# Calculate perturbation signature (PRTB).
sub_cluster<- CalcPerturbSig(
  object = sub_cluster, 
  assay = "RNA", 
  slot = 'data', 
  gd.class ="gene", 
  nt.cell.class = "Non-Targeting", 
  reduction = "pca", 
  ndims = 20, 
  num.neighbors = 25, 
  new.assay.name = "PRTB")


# Normalize data, find variable features and center data.
DefaultAssay(object = sub_cluster) <- 'PRTB'

# Use variable features from RNA assay.
VariableFeatures(object = sub_cluster) <- VariableFeatures(object = sub_cluster[["RNA"]])
sub_cluster <- ScaleData(object = sub_cluster, do.scale = F, do.center = T)

# Run PCA to reduce the dimensionality of the data.
sub_cluster <- RunPCA(object = sub_cluster, reduction.key = 'prtbpca', reduction.name = 'prtbpca')

# Run UMAP to visualize clustering in 2-D.
sub_cluster <- RunUMAP(
  object = sub_cluster, 
  dims = 1:20, 
  reduction = 'prtbpca', 
  reduction.key = 'prtbumap', 
  reduction.name = 'prtbumap')


# Setup custom theme for plotting.
custom_theme <- theme(
  plot.title = element_text(size=16, hjust = 0.5), 
  legend.key.size = unit(0.7, "cm"), 
  legend.text = element_text(size = 14))




p1 <- DimPlot(
  object = sub_cluster, 
  group.by = 'Crispr', 
  pt.size = 0.2, 
  reduction = "umap", 
  split.by = "Crispr", 
  ncol = 1, 
  cols = c("grey39","goldenrod3")) + 
  ggtitle("Perturbation Status") +
  ylab("UMAP 2") +
  xlab("UMAP 1") +
  custom_theme
p1


# Run mixscape.
sub_cluster <- RunMixscape(
  sub_cluster,
  assay = "PRTB",
  slot = "scale.data",
  labels = "gene",
  nt.class.name = "Non-Targeting",
  new.class.name = "mixscape_class",
  min.de.genes = 3,
  min.cells = 5,
  de.assay = "RNA",
  logfc.threshold = 0.25,
  iter.num = 20,
  verbose = TRUE,
  split.by = NULL,
  fine.mode = TRUE,
  fine.mode.labels = "NT",
  prtb.type = "KO"
)


# Calculate percentage of KD cells for all target gene classes.
df <- prop.table(table(sub_cluster$mixscape_class.global, sub_cluster$NT),2)
df
df2 <- reshape2::melt(df)
df2$Var2 <- as.character(df2$Var2)
test <- df2[which(df2$Var1 == "KD"),]
test <- test[order(test$value, decreasing = T),]
new.levels <- test$Var2
df2$Var2 <- factor(df2$Var2, levels = new.levels )
df2$Var1 <- factor(df2$Var1, levels = c("Non-Targeting", "NP", "KD"))
df2$gene <- sapply(as.character(df2$Var2), function(x) strsplit(x, split = "g")[[1]][1])
df2$guide_number <- sapply(as.character(df2$Var2), 
                           function(x) strsplit(x, split = "g")[[1]][2])
df3 <- df2[-c(which(df2$gene == "NT")),]

p1 <- ggplot(df3, aes(x = guide_number, y = value*100, fill= Var1)) +
  geom_bar(stat= "identity") +
  theme_classic()+
  scale_fill_manual(values = c("grey49", "grey79","red4")) + 
  ylab("% of cells") +
  xlab("sgRNA")
p1 + theme(axis.text.x = element_text(size = 12, hjust = 1), 
           axis.text.y = element_text(size = 12), 
           axis.title = element_text(size = 10), 
           strip.text = element_text(size=12, face = "bold")) + 
  facet_wrap(vars(gene),ncol = 5, scales = "free") +
  labs(fill = "mixscape class") +theme(legend.title = element_text(size = 10),
                                       legend.text = element_text(size = 8))


Idents(object = sub_cluster) <- "mixscape_class"
unique(sub_cluster@meta.data$mixscape_class)

MixscapeHeatmap(object = sub_cluster, 
                ident.1 = "Non-Targeting", 
                ident.2 = "Ilf2 KO", 
                logfc.threshold = 0.1,
                test.use = "DESeq2",
                balanced = TRUE, 
                assay = "RNA", 
                max.genes = 200, 
                order.by.prob = TRUE,
                mixscape.class =  "mixscape_class", 
                max.cells.group =200, 
                fc.name = "avg_log2FC",
                pval.cutoff = 0.05,
                angle = 0, 
                size=6.5) + theme(axis.text.y = element_text(size = 16))
#########################################################################################
library(ExperimentHub)
library(DESeq2)
library(tidyverse)
library(openxlsx)
view(seurat_object@meta.data)
cell_plot <- DimPlot(seurat_object, reduction = 'umap', group.by = 'sgRNA')
cond_plot <- DimPlot(seurat_object, reduction = 'umap', group.by = 'Crispr')
cell_plot|cond_plot
DefaultAssay(seurat_object)

AggregateExpression

cts <- AggregateExpression(sub_cluster, 
                           group.by = c("sgRNA", "Crispr"),
                           assays = 'RNA',
                           slot = "data",
                           return.seurat = FALSE)

cts <- cts$RNA
cts.t <- t(cts)
cts.t[1:6, 1:6]
cts.t <- as.data.frame(cts.t)
splitRows <- gsub('_.*', '', rownames(cts.t))
splitRows <- gsub('_Perturbed', '', rownames(cts.t))

cts.split <- split.data.frame(cts.t,
                              f = factor(splitRows))

cts.split.modified <- lapply(cts.split, function(x){
  rownames(x) <- gsub('.*_(.*)', '\\1', rownames(x))
  t(x)
  
})

# extract counts data 
counts_Yy1 <- as.data.frame(cbind(cts.split.modified$Yy1.g1, cts.split.modified$Yy1.g2, cts.split.modified$Yy1.g3, cts.split.modified$Yy1.g4,
cts.split.modified$Yy1.g5, cts.split.modified$`Non-Targeting.g1_NT`, cts.split.modified$`Non-Targeting.g2_NT`,
cts.split.modified$`Non-Targeting.g3_NT`, cts.split.modified$`Non-Targeting.g4_NT`, cts.split.modified$`Non-Targeting.g5_NT`,
cts.split.modified$`Non-Targeting.g6_NT`, cts.split.modified$`Non-Targeting.g7_NT`, cts.split.modified$`Non-Targeting.g8_NT`,
cts.split.modified$`Non-Targeting.g9_NT`, cts.split.modified$`Non-Targeting.g10_NT`))

counts_Yy1$Gene <- rownames(counts_Yy1)
rownames(counts_Yy1) <- NULL    
write.xlsx(counts_Yy1, file = "Normalized_Yy1_counts.xlsx")

# prepare data for DESeq2
colData <- data.frame(samples = colnames(counts_Klf5))
condition <- c(rep("KD", 5), rep("Ctrl", 10))
colData <- colData %>%
  mutate(condition = condition)

dds <- DESeqDataSetFromMatrix(countData = counts_Yy1,
                              colData = colData,
                              design = ~ condition
)

class(counts_Yy1)
summary(as.vector(counts_Yy1))

# filter
keep <- rowSums(counts(dds)) >=10
dds <- dds[keep,]
# run DESeq2
dds <- DESeq(dds)

# Check the coefficients for the comparison
resultsNames(dds)

# Generate results object
res <- results(dds, name = "condition_KD_vs_Ctrl")
res

write.csv(res_df, file = "Pseudo_Yy1.csv", row.names = TRUE)

# normalize expression according to size factor 
write.csv(as.data.frame(counts(dds, normalized = TRUE)), file = "deseq2_normalized_counts_Yy1.csv")
-------------------------------------------------------------------------------------------------------------------------------------------
> sessionInfo()
R version 4.4.2 (2024-10-31)
Platform: x86_64-pc-linux-gnu
Running under: Ubuntu 24.04.1 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 
LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

time zone: Etc/UTC
tzcode source: system (glibc)

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] sessioninfo_1.2.2  reshape2_1.4.4     dplyr_1.1.4        scales_1.3.0       patchwork_1.3.0    ggplot2_3.5.1     
[7] SeuratObject_5.0.2 Seurat_4.3.0      

loaded via a namespace (and not attached):
  [1] RColorBrewer_1.1-3          rstudioapi_0.17.1           jsonlite_1.8.9              magrittr_2.0.3             
  [5] spatstat.utils_3.1-1        farver_2.1.2                zlibbioc_1.52.0             vctrs_0.6.5                
  [9] ROCR_1.0-11                 spatstat.explore_3.3-3      S4Arrays_1.6.0              htmltools_0.5.8.1          
 [13] SparseArray_1.6.0           sctransform_0.4.1           parallelly_1.40.1           KernSmooth_2.23-24         
 [17] htmlwidgets_1.6.4           ica_1.0-3                   plyr_1.8.9                  plotly_4.10.4              
 [21] zoo_1.8-12                  igraph_2.1.2                mime_0.12                   lifecycle_1.0.4            
 [25] pkgconfig_2.0.3             Matrix_1.7-1                R6_2.5.1                    fastmap_1.2.0              
 [29] MatrixGenerics_1.18.0       GenomeInfoDbData_1.2.13     fitdistrplus_1.2-1          future_1.34.0              
 [33] shiny_1.10.0                digest_0.6.37               colorspace_2.1-1            S4Vectors_0.44.0           
 [37] ps_1.8.1                    DESeq2_1.46.0               tensor_1.5                  irlba_2.3.5.1              
 [41] GenomicRanges_1.58.0        labeling_0.4.3              progressr_0.15.1            fansi_1.0.6                
 [45] spatstat.sparse_3.1-0       httr_1.4.7                  polyclip_1.10-7             abind_1.4-8                
 [49] compiler_4.4.2              remotes_2.5.0               withr_3.0.2                 BiocParallel_1.40.0        
 [53] pkgbuild_1.4.5              R.utils_2.12.3              MASS_7.3-61                 DelayedArray_0.32.0        
 [57] tools_4.4.2                 lmtest_0.9-40               httpuv_1.6.15               future.apply_1.11.3        
 [61] goftest_1.2-3               R.oo_1.27.0                 glue_1.8.0                  callr_3.7.6                
 [65] nlme_3.1-166                promises_1.3.2              grid_4.4.2                  Rtsne_0.17                 
 [69] cluster_2.1.6               generics_0.1.3              gtable_0.3.6                spatstat.data_3.1-4        
 [73] R.methodsS3_1.8.2           tidyr_1.3.1                 data.table_1.16.4           XVector_0.46.0             
 [77] sp_2.1-4                    utf8_1.2.4                  BiocGenerics_0.52.0         spatstat.geom_3.3-4        
 [81] RcppAnnoy_0.0.22            ggrepel_0.9.6               RANN_2.6.2                  pillar_1.9.0               
 [85] stringr_1.5.1               spam_2.11-0                 later_1.4.1                 splines_4.4.2              
 [89] lattice_0.22-6              survival_3.7-0              deldir_2.0-4                tidyselect_1.2.1           
 [93] locfit_1.5-9.10             miniUI_0.1.1.1              pbapply_1.7-2               gridExtra_2.3              
 [97] IRanges_2.40.0              SummarizedExperiment_1.36.0 scattermore_1.2             stats4_4.4.2               
[101] Biobase_2.66.0              mixtools_2.0.0              matrixStats_1.4.1           UCSC.utils_1.2.0           
[105] stringi_1.8.4               lazyeval_0.2.2              codetools_0.2-20            kernlab_0.9-33             
[109] tibble_3.2.1                cli_3.6.3                   uwot_0.2.2                  xtable_1.8-4               
[113] reticulate_1.40.0           segmented_2.1-3             munsell_0.5.1               processx_3.8.4             
[117] GenomeInfoDb_1.42.1         Rcpp_1.0.13-1               globals_0.16.3              spatstat.random_3.3-2      
[121] png_0.1-8                   spatstat.univar_3.1-1       parallel_4.4.2              dotCall64_1.2              
[125] listenv_0.9.1               viridisLite_0.4.2           ggridges_0.5.6              crayon_1.5.3               
[129] leiden_0.4.3.1              purrr_1.0.2                 rlang_1.1.4                 cowplot_1.1.3  
